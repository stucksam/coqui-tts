#!/bin/bash
#SBATCH --time=1440
#SBATCH --job-name=run_tts_chde_stucksam
#SBATCH --ntasks=1
#SBATCH --nodes=1
#SBATCH --gres=gpu:a100sxm:1
#SBATCH --mem=64G
#SBATCH --account=cai_nlp
#SBATCH --partition=p_gpu_all
#SBATCH --output=/cluster/home/stucksam/log/%j_%N__run_tts_chde_stucksam.out
#SBATCH --error=/cluster/home/stucksam/log/%j_%N__run_tts_chde_stucksam.err

# %j: parses the slurm jobID into the file-name
# %N: parses the Node name into the file-name

env_name="ma"
venv_base_dir="/raid/persistent_scratch/stucksam/venvs"
venv_path="$venv_base_dir/$env_name"

# create venv base dir if it does not exist
mkdir -p /raid/persistent_scratch/stucksam/venvs/

# Explicitly load cuda 12.2.2
module load cuda/12.2.2

# Check if the virtual environment exists
echo "Searching ($venv_path)..."
if [ -d "$venv_path" ]; then
    echo "Virtual environment ($env_name) found. Activating..."
    source "$venv_path/bin/activate"
else
    echo "Virtual environment ($env_name) not found. Creating..."
    module load python/3.11.9
    virtualenv $venv_path
    unset PIP_TARGET
    unset PYTHONPATH
    source "$venv_path/bin/activate"
fi
# read requirements.txt file and store valid packages into list
declare -A packages
while IFS= read -r line || [ -n "$line" ]; do
    # Strip comments from the line
    line="${line%%#*}"
    # Remove trailing spaces
    line="${line%"${line##*[![:space:]]}"}"
    # Skip empty lines
    [[ -z "$line" ]] && continue
    # Split the line into package and version if it matches the pattern package==version
    if [[ "$line" =~ ^[a-zA-Z0-9_(\-\.)]+==([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$ ]]; then
        IFS='==' read -r package version <<< "${line/==/==}"
        # Remove leading = from version
        version=${version#=}
        # Add the package and version to the associative array
        packages[$package]=$version
    else
        echo "Ignoring invalid line: $line"
    fi
done < /cluster/home/stucksam/swiss-phonemes-tts/requirements.txt

# Check if the correct package versions are installed:
for package in "${!packages[@]}"; do
    version=${packages[$package]}
    installed_version=$(pip3 show $package | grep "Version:" | cut -d' ' -f2)
    if [ -z "$installed_version" ]; then
        echo "Installing $package==$version..."
        pip3 install "$package==$version"
    elif [ "$installed_version" != "$version" ]; then
        echo "$package is installed but version $installed_version is not the required version $version. Updating..."
        pip3 install "$package==$version"
    fi
done

# Source and destination directories
SOURCE_DIR="/cluster/home/stucksam/datasets/dialects"
DEST_DIR="/scratch/dialects"

# TODO do concurrently
cp -r "$SOURCE_DIR" "$DEST_DIR"

# Optional: Print a message to indicate completion
echo "Folder copied from $SOURCE_DIR to $DEST_DIR"

python3 recipes/ljspeech/xtts_v2/main.py

# submit the job:
# sbatch <path-to-submit-file>/main.submit

